remove.packages("tvvarGAM") # in case old version is installed

install_github("LauraBringmann/tvvarGAM")

library(qgraph) # for plotting the visulaization

figDir <- ("") #set ur working directory here

#------------------------------------
#------- Read/Import Data -----------
#------------------------------------


data <- read_csv("~/Downloads/P001.csv") # 
View(data)

#------------------------------------
#------- Inspect Datasets -----------
#------------------------------------

head(data)

#------------------------------------
#------- Subset Variables -----------
#------------------------------------

mood_data <- as.matrix(data[, 3:16])
mood_data <- mood_data[,-12:-13]
mood_data <- mood_data[,-9]


time_data <- data[,19:22]



#------------------------------------
#------- Rename Columns -------------
#------------------------------------

##Add column as date (unaggregated) and add time data

names<-scan("names(mood_labels_p001).txt",what = "character", sep = "\n")

mood_labels <- colnames(mood_data)

head(time_data)

head(mood_data)

dim(mood_data)

mood_data[is.na(mood_data)]<- 0 # removing NA's
na.omit(mood_data)


# ----------------------------------------------------------------------------------
# ----------------------- 2) Estimation --------------------------------------------
# ----------------------------------------------------------------------------------

library(tvvarGAM)



tvvargam_obj <- tvvarGAM(data = mood_data,
                         dayvar = time_data$day_var,
                         beepvar = time_data$beep_var,
                         nb = 10,
                         scale = TRUE)


#view updated vector

# Save model object
saveRDS(tvvargam_obj, file="tvvargam10_objP002.RDS")
tvvargam_obj <- readRDS(file="tvvargam10_objP002.RDS")

# ----------------------------------------------------------------------------------
# ----------------------- 3) Visualization -----------------------------------------
# ----------------------------------------------------------------------------------

library(qgraph)

# ----- Aux Functions ------

# Function for timeline
f_timeline_new <- function(length = .20, 
                           gap = .005, 
                           mar = c(0,0,0,0), 
                           ylim = c(-.1,.1), 
                           ytext = -.1,
                           cex = 1) {
  
  
  par(mar=mar)
  plot.new()
  plot.window(xlim=c(0,1), ylim=ylim)
  # box()
  
  # arrows
  p_weeks <- c(1,2,3,4)
  bor_end <- c(0,cumsum(p_weeks)/sum(p_weeks))
  for(i in 1:4) {
    arrows(bor_end[i]+gap, 0, bor_end[i+1]-gap, code=3, length=length, lwd=1.5)
  }
  #for(i in 1:3) abline(v=bor_end[i+1], lty=2, col="grey")
  
  # text
  t_lengths <- p_weeks / sum(p_weeks)
  midpoints <- bor_end[-1] - t_lengths/2
  
  text(midpoints, rep(ytext, 4), c("Baseline (1w)",
                                   "Assessment @ (2w)",
                                   "Assessment @ (3w)",
                                   "Assessment @ (4w)"),
       cex = cex)

  
}

# ----- Preprocessing tvvarGAM() output ------


# Thin to X estimation points and delete intercept
timeL <- dim(tvvargam_obj$Results_GAM$Estimate)[3]
wadj_point <- tvvargam_obj$Results_GAM$Estimate[-1, , ]

ind_thin <- round(seq(1, timeL, length = 20))

wadj_point <- tvvargam_obj$Results_GAM$Estimate[-1, , ind_thin]
wadj_CIlow <- tvvargam_obj$Results_GAM$CI_low[-1, , ind_thin]
wadj_CIup <- tvvargam_obj$Results_GAM$CI_high[-1, , ind_thin]
# Plot before thresh and after
wadj_point_unthresh <- wadj_point

## Code Laura: Start
# This is to only show the significant arrows, see Bringmann et al. 2017 Psychological Methods for more information.
unlist_this <- function(x) { matrix(unlist(x$s.table[-1,4]), 11,1) }
sign <- matrix(unlist(lapply(lapply(tvvargam_obj$model,summary), unlist_this)),11,11)

for(ii in 1:11) {
  for(j in 1:11) {
    if(sign[j, ii] < 0.1) # or any other significance e.g., .05
    {wadj_point[j, ii,]<-wadj_point[j,ii,]}
    else{wadj_point[j,ii,]<-0}}}
wadj_point_thresh<-wadj_point
## Code Laura: End


ind_overlap <- sign(round(wadj_CIlow,2)) == sign(round(wadj_CIup,2)) # if signs are the same, there is no overlap with zero
wadj_point_thresh[!ind_overlap] <- 0


# ----- Plotting ------

pdf(paste0(figDir, "Fig_Application_tvvarGAM_thresh-20estp-10nb_5_15_20.pdf"), width = 8, height = 7)

# 1) Define Layout
lmat <- matrix(c(1, 2, 3,
                 4, 4, 4,
                 5, 5, 5), ncol=3, byrow = T)

lo <- layout(lmat, 
             heights = c(.7,.1, .6), 
             widths = c(1, 1, 1))
#layout.show(lo)


# 2) Two Network Plots

# Get layout of mean graph
Q <- list()
Q$layout <- readRDS("/Users/julianadam/Capstone 30.05.22/layoutRDS.mgm")



# Plot graph at selected fixed time points
tpSelect <- c(5, 15, 20)

# Edgecolor & lines
a_edgecolor <- array("darkblue", dim=c(11, 11, 20))
a_edgecolor[wadj_point < 0] <- "red"
a_lty <- array(1, dim=c(11, 11, 20))
a_lty[wadj_point < 0] <- 2

for(tp in tpSelect) {
  qgraph(wadj_point_thresh[, , tp], 
         layout = Q$layout,
         labels = mood_labels, 
         vsize = 13, 
         esize = 10,
         asize = 10, 
         mar = c(6, 6, 6, 6), 
         minimum = 0, 
         maximum = .5, # run with .1-.4
         edge.color = a_edgecolor[, , tp], 
         lty = a_lty[, , tp])
}

# 4) Timeline
f_timeline_new(length = .1, 
               mar=c(0, 4, 0, 1), 
               ylim = c(-1.2, .2), 
               ytext = -.9, 
               cex = 1)

# 5) Line-plots + CIs
plot.new()
par(mar = c(4,4,0,1))
plot.window(xlim=c(1, 20), ylim=c(-.25, .55))
axis(1, c(1, 5, 10, 15, 20), labels=T)
axis(2, c(-.25, 0, .25, .5), las=2)
abline(h = 0, col = "grey", lty=2)
title(xlab = "Estimation points", cex.lab = 1.2)
title(ylab = "Parameter estimate", cex.lab = 1.2)

# Show same parameters as in mgm-analysis
head(parm_sds_mat_ord)
m_par_display <- matrix(c(1, 8, 
                         10, 11, 
                         1, 2), ncol = 2, byrow = T)

# Select colors
library(RColorBrewer)
library(scales)
cols <- brewer.pal(5, "Set1")[c(2,4,5)] # avoid red/green because used for edges in upper panel

for(i in 1:nrow(m_par_display)) {
  
  # Plot point estimates
  par_row <- m_par_display[i, ]
  P1_pointest <- wadj_point_unthresh[par_row[1], par_row[2], ]
  # lines((1:20)+v_jitter[i], P1_pointest, col = cols[i], lwd = 2, lty=i) 
  lines((1:20), P1_pointest, col = cols[i], lwd = 2, lty=i)
  
  # Center CI
  CI_low_par <- wadj_CIlow[par_row[1], par_row[2], ] 
  CI_up_par <- wadj_CIup[par_row[1], par_row[2], ] 
  
  polygon(x = c(1:20, 20:1), y = c(CI_low_par, rev(CI_up_par)), 
          col=alpha(colour = cols[i], alpha = .3), border=FALSE)
  
}



# Legend
legend_labels <- c(expression("Drinks"["t-1"]  %->%  "Happy"["t"]),
                   expression("Impulsive"["t-1"]  %->%  "Want to Drink"["t"]),
                   expression("Drinks"["t-1"]  %->%  "Comfortable"["t"]))

legend(1, .49, 
       legend_labels,
       col = cols, 
       lwd = 2, bty = "n", cex = 1, horiz=T, lty=1:3)


dev.off()
